"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * A dummy storage that is used to store data in memory if local/session storage is not supported to
 * avoid errors. The data stored in InMemoryStorage gets cleared when the page is closed or reloaded.
 * */
var InMemoryStorage = /** @class */ (function () {
    function InMemoryStorage() {
        this._length = 0;
        this.buffer = {};
    }
    Object.defineProperty(InMemoryStorage.prototype, "length", {
        get: function () {
            return this._length;
        },
        enumerable: true,
        configurable: true
    });
    InMemoryStorage.prototype.clear = function () {
        for (var key in this.buffer) {
            this.removeItem(key);
        }
    };
    InMemoryStorage.prototype.getItem = function (key) {
        if (this.buffer.hasOwnProperty(key)) {
            return this.buffer[key];
        }
        return null;
    };
    InMemoryStorage.prototype.key = function (index) {
        throw new Error('Method unsupported');
    };
    InMemoryStorage.prototype.removeItem = function (key) {
        if (this.buffer.hasOwnProperty(key)) {
            delete this.buffer[key];
            this._length--;
        }
    };
    InMemoryStorage.prototype.setItem = function (key, data) {
        if (!this.buffer.hasOwnProperty(key)) {
            this._length++;
        }
        this.buffer[key] = data;
    };
    return InMemoryStorage;
}());
exports.InMemoryStorage = InMemoryStorage;
//# sourceMappingURL=in-memory-storage.js.map