import { __decorate, __values } from "tslib";
import { ChangeDetectionStrategy, Component, ElementRef, Input, OnChanges, Renderer2, ViewChild } from '@angular/core';
import QRCode from 'qrcode';
import { NgxQrcodeElementTypes } from './qrcode.types';
import { DEFAULT_VALUES } from './qrcode.constants';
import * as ɵngcc0 from '@angular/core';

var _c0 = ["qrcElement"];
var QrcodeComponent = /** @class */ (function () {
    function QrcodeComponent(renderer) {
        this.renderer = renderer;
        this.elementType = DEFAULT_VALUES.elementType;
        this.cssClass = DEFAULT_VALUES.cssClass;
        this.value = DEFAULT_VALUES.value;
        this.version = DEFAULT_VALUES.version;
        this.errorCorrectionLevel = DEFAULT_VALUES.errorCorrectionLevel;
        this.margin = DEFAULT_VALUES.margin;
        this.scale = DEFAULT_VALUES.scale;
        this.width = DEFAULT_VALUES.width;
        this.colorDark = DEFAULT_VALUES.colorDark;
        this.colorLight = DEFAULT_VALUES.colorLight;
    }
    QrcodeComponent.prototype.ngOnChanges = function () {
        this.createQRCode();
    };
    QrcodeComponent.prototype.createQRCode = function () {
        var _this = this;
        if (!this.value) {
            return;
        }
        var element;
        switch (this.elementType) {
            case NgxQrcodeElementTypes.CANVAS:
                element = this.renderer.createElement('canvas');
                this.toCanvas(element).then(function () {
                    _this.renderElement(element);
                }).catch(function (e) {
                    _this.removeElementChildren();
                    console.error(e);
                });
                break;
            default:
                element = this.renderer.createElement('img');
                this.toDataURL().then(function (src) {
                    element.setAttribute('src', src);
                    if (_this.alt) {
                        element.setAttribute('alt', _this.alt);
                    }
                    _this.renderElement(element);
                }).catch(function (e) {
                    _this.removeElementChildren();
                    console.error(e);
                });
        }
    };
    QrcodeComponent.prototype.toDataURL = function () {
        return QRCode.toDataURL(this.value, {
            version: this.version,
            errorCorrectionLevel: this.errorCorrectionLevel,
            margin: this.margin,
            scale: this.scale,
            width: this.width,
            color: {
                dark: this.colorDark,
                light: this.colorLight
            }
        });
    };
    QrcodeComponent.prototype.toCanvas = function (canvas) {
        return QRCode.toCanvas(canvas, this.value, {
            version: this.version,
            errorCorrectionLevel: this.errorCorrectionLevel,
            margin: this.margin,
            scale: this.scale,
            width: this.width,
            color: {
                dark: this.colorDark,
                light: this.colorLight
            }
        });
    };
    QrcodeComponent.prototype.renderElement = function (element) {
        this.removeElementChildren();
        this.renderer.appendChild(this.qrcElement.nativeElement, element);
    };
    QrcodeComponent.prototype.removeElementChildren = function () {
        var e_1, _a;
        try {
            for (var _b = __values(this.qrcElement.nativeElement.childNodes), _c = _b.next(); !_c.done; _c = _b.next()) {
                var node = _c.value;
                this.renderer.removeChild(this.qrcElement.nativeElement, node);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    QrcodeComponent.ctorParameters = function () { return [
        { type: Renderer2 }
    ]; };
    __decorate([
        Input()
    ], QrcodeComponent.prototype, "elementType", void 0);
    __decorate([
        Input()
    ], QrcodeComponent.prototype, "cssClass", void 0);
    __decorate([
        Input()
    ], QrcodeComponent.prototype, "alt", void 0);
    __decorate([
        Input()
    ], QrcodeComponent.prototype, "value", void 0);
    __decorate([
        Input()
    ], QrcodeComponent.prototype, "version", void 0);
    __decorate([
        Input()
    ], QrcodeComponent.prototype, "errorCorrectionLevel", void 0);
    __decorate([
        Input()
    ], QrcodeComponent.prototype, "margin", void 0);
    __decorate([
        Input()
    ], QrcodeComponent.prototype, "scale", void 0);
    __decorate([
        Input()
    ], QrcodeComponent.prototype, "width", void 0);
    __decorate([
        Input()
    ], QrcodeComponent.prototype, "colorDark", void 0);
    __decorate([
        Input()
    ], QrcodeComponent.prototype, "colorLight", void 0);
    __decorate([
        ViewChild('qrcElement')
    ], QrcodeComponent.prototype, "qrcElement", void 0);
QrcodeComponent.ɵfac = function QrcodeComponent_Factory(t) { return new (t || QrcodeComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
QrcodeComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: QrcodeComponent, selectors: [["ngx-qrcode"]], viewQuery: function QrcodeComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.qrcElement = _t.first);
    } }, inputs: { elementType: "elementType", cssClass: "cssClass", value: "value", version: "version", errorCorrectionLevel: "errorCorrectionLevel", margin: "margin", scale: "scale", width: "width", colorDark: "colorDark", colorLight: "colorLight", alt: "alt" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 2, vars: 2, consts: [["qrcElement", ""]], template: function QrcodeComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "div", null, 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵclassMap(ctx.cssClass);
    } }, encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(QrcodeComponent, [{
        type: Component,
        args: [{
                selector: 'ngx-qrcode',
                template: "\n    <div #qrcElement [class]=\"cssClass\"></div>",
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: ɵngcc0.Renderer2 }]; }, { elementType: [{
            type: Input
        }], cssClass: [{
            type: Input
        }], value: [{
            type: Input
        }], version: [{
            type: Input
        }], errorCorrectionLevel: [{
            type: Input
        }], margin: [{
            type: Input
        }], scale: [{
            type: Input
        }], width: [{
            type: Input
        }], colorDark: [{
            type: Input
        }], colorLight: [{
            type: Input
        }], alt: [{
            type: Input
        }], qrcElement: [{
            type: ViewChild,
            args: ['qrcElement']
        }] }); })();
    return QrcodeComponent;
}());
export { QrcodeComponent };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,